
'use server';

import { supabase, supabaseError } from '@/lib/supabaseClient';
import type { UserProfileSupabase } from './auth'; // Use the Supabase profile type

// Ensure your 'events' table in Supabase matches this structure.
// Timestamps (start_date, end_date, registration_deadline, created_at) should be 'timestamptz'.
// fee is in Paisa.
export interface EventData {
    id?: string; // UUID, auto-generated by Supabase
    name: string;
    description: string;
    venue: string;
    rules?: string | null;
    start_date: string; // ISO string
    end_date: string;   // ISO string
    registration_deadline?: string | null; // ISO string
    event_type: 'individual' | 'group'; // Consider using an enum type in PostgreSQL
    min_team_size?: number | null;
    max_team_size?: number | null;
    fee: number; // Fee in Paisa
    created_at?: string; // ISO string, auto-generated by Supabase
    image_url?: string | null;
    image_storage_path?: string | null; // Path in Supabase Storage
}

// Structure for your 'participations' table.
// It should link to 'users' (user_id) and 'events' (event_id).
// payment_details could be a JSONB column.
export interface ParticipationData {
    id?: string; // Primary key for participation, could be payment order_id if unique
    user_id: string;
    event_id: string;
    event_name: string; // Denormalized for convenience
    user_name: string; // Denormalized
    user_email: string; // Denormalized
    user_phone: string; // Denormalized
    user_branch: string; // Denormalized
    user_semester: number; // Denormalized
    user_registration_number: string; // Denormalized
    payment_details?: { // Store as JSONB in Supabase
        order_id: string;
        payment_id: string;
        method: string;
    } | null;
    qr_code_data_uri?: string | null;
    participated_at?: string; // ISO string, timestamp of registration
    attended_at?: string | null; // ISO string, timestamp of actual attendance
}


/**
 * Records event participation in the 'participations' table.
 */
export async function participateInEvent(participationData: Omit<ParticipationData, 'id' | 'participated_at' | 'attended_at'>): Promise<{ success: boolean; participationId?: string; message?: string }> {
  console.log('[Supabase Service] participateInEvent invoked for event:', participationData.event_id, 'by user:', participationData.user_id);

  if (supabaseError || !supabase) {
    const errorMessage = `Participation service unavailable: Supabase client error - ${supabaseError?.message || 'Client not initialized'}.`;
    return { success: false, message: errorMessage };
  }

  try {
    // Check if user is already registered for the event
    const { data: existingParticipation, error: checkError } = await supabase
      .from('participations')
      .select('id')
      .eq('user_id', participationData.user_id)
      .eq('event_id', participationData.event_id)
      .limit(1)
      .single();

    if (checkError && checkError.code !== 'PGRST116') { // PGRST116: "Searched item was not found"
      throw checkError;
    }
    if (existingParticipation) {
      return { success: false, message: 'You are already registered for this event.' };
    }

    const docDataToInsert = {
      ...participationData,
      participated_at: new Date().toISOString(),
      // qr_code_data_uri is already in participationData
    };
    
    // If using payment_details.order_id as primary key, ensure it's unique
    // Otherwise, let Supabase generate a UUID for 'id'
    const { data: newParticipation, error: insertError } = await supabase
      .from('participations')
      .insert(docDataToInsert)
      .select('id') // Or select('order_id') if that's your PK
      .single();

    if (insertError) throw insertError;

    if (!newParticipation || !newParticipation.id) {
        return { success: false, message: 'Participation recorded but failed to retrieve ID.' };
    }

    console.log('[Supabase Service] Participation recorded with ID:', newParticipation.id);
    return { success: true, participationId: newParticipation.id };

  } catch (error: any) {
    console.error('[Supabase Service Error] Error recording participation:', error.message, error.stack);
    return { success: false, message: `Could not record participation: ${error.message || 'Unknown database error'}` };
  }
}

/**
 * Fetches user profile data from the 'users' table.
 */
 export async function getUserProfile(userId: string): Promise<{ success: boolean; data?: UserProfileSupabase; message?: string }> {
     console.log('[Supabase Service] getUserProfile invoked for user:', userId);

     if (supabaseError || !supabase) {
         return { success: false, message: `Supabase client error: ${supabaseError?.message || 'Client not initialized'}.` };
     }
     if (!userId) return { success: false, message: 'User ID is required.' };

     try {
         const { data, error } = await supabase
            .from('users') // Your public profiles table
            .select('*')
            .eq('id', userId)
            .single();

        if (error) {
            if (error.code === 'PGRST116') return { success: false, message: `User profile not found for user: ${userId}`};
            throw error;
        }
        return { success: true, data: data as UserProfileSupabase };

     } catch (error: any) {
         console.error('[Supabase Service Error] Error fetching user profile:', error.message, error.stack);
         return { success: false, message: `Failed to fetch user profile: ${error.message || 'Unknown database error'}` };
     }
 }


/**
 * Fetches all events/programs from the 'events' table, ordered by creation date.
 */
export async function getEvents(): Promise<{ success: boolean; events?: EventData[]; message?: string }> {
    console.log('[Supabase Service] getEvents invoked.');

    if (supabaseError || !supabase) {
      return { success: false, message: `Supabase client error: ${supabaseError?.message || 'Client not initialized'}.` };
    }

    try {
        const { data, error } = await supabase
            .from('events')
            .select('*')
            .order('created_at', { ascending: false });

        if (error) throw error;

        const events: EventData[] = data || [];
        console.log(`[Supabase Service] getEvents: Fetched ${events.length} items.`);
        return { success: true, events };

    } catch (error: any) {
        console.error('[Supabase Service Error] Error fetching events:', error.message, error.stack);
        return { success: false, message: `Could not fetch items: ${error.message || 'Unknown database error'}` };
    }
}

/**
 * Fetches participation data for a specific user from the 'participations' table.
 */
export async function getParticipationData(userId: string): Promise<{ success: boolean; participations?: ParticipationData[]; message?: string }> {
  console.log('[Supabase Service] getParticipationData invoked for user:', userId);

  if (supabaseError || !supabase) {
    return { success: false, message: `Supabase client error: ${supabaseError?.message || 'Client not initialized'}.` };
  }
  if (!userId) return { success: false, message: 'User ID is required.' };

  try {
    const { data, error } = await supabase
      .from('participations')
      .select('*') // You might want to join with 'events' table to get event details
      .eq('user_id', userId)
      .order('participated_at', { ascending: false });

    if (error) throw error;

    const participations: ParticipationData[] = data || [];
    console.log(`[Supabase Service] getParticipationData: Fetched ${participations.length} participations for user ${userId}.`);
    return { success: true, participations };
  } catch (error: any) {
    console.error('[Supabase Service Error] Error fetching participations:', error.message, error.stack);
    return { success: false, message: `Could not fetch participation data: ${error.message || 'Unknown error'}` };
  }
}
